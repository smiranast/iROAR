#!/usr/bin/env python3
import sys
import argparse
import numpy as np
import scr.Count as Count
import scr.Merge as Merge
import scr.Filter as Filter
import scr.Bias as Bias


def main():
    parser = argparse.ArgumentParser(prog='iroar')
    subparsers = parser.add_subparsers()

    count_parser = subparsers.add_parser("Count", help = 'Adjust clonal counts with OAR statistics.', formatter_class=argparse.RawTextHelpFormatter)    
    count_parser.add_argument("-i", "--input" , help = "Input directory containing VDJtools tables", type=str, metavar='<input>', required=True)
    count_parser.add_argument("-o", "--output",  help = "Output directory path", type=str, metavar='<output>', required=True)
    count_parser.add_argument("--long", help = "Do not overwrite standard VDJtools columns instead of adding new ones\n(default=False)", action='store_false')
    count_parser.add_argument("-c", "--chains", help = "List of chains to analyse, sepatated by comma", type=str, metavar='<chain1>,<chain2>...<chainN>', default="IGH,IGK,IGL,TRA,TRB,TRD,TRG")
    count_parser.add_argument("-z", "--outliers", help = "Do not include top-N clones for each gene in OAR calculation\n(default=0)", metavar='<int>', type=int, default=0)
    count_parser.add_argument("-zd", "--outliers_depth", help = "Minilal number of clones for each gene, where outliers filtration is applied\n(default=10)", metavar='<int>', type=int, default=10)
    count_parser.add_argument("-f" ,"--all_frame", help = "Calculate OAR using all clones, not only out-of-frame", action='store_true')
    count_parser.add_argument("-om" ,"--outframe_mask", help = "Groups of rearrangements being considered to be out-of-frame. Possible values:\n - U (Uncomplete rearrangements),\n - O (outframe with * and/or _ in CDR3aa),\n - L (without \'C\' at the begining and \'W/F\' at the end Letter of CDR3aa),\n - G (pseudo- and ORF Genes)", default="O",type=str, metavar="<UOLG>")                
    count_parser.add_argument("-min_outframe", help = "Minimal out-of-frame clones threshold for OAR calculation.\nIf a segment is present within less clones than the specified value\nOAR is equal to 1(if outframe = True)", default=0, type=int, metavar='<int>')
    count_parser.add_argument("-filter_few", help = "Don't show clones with counts less than N before ceiling (default - show all)", default=0, type=float, metavar='<float>')
    count_parser.add_argument("-u", "--upper_only", help = "Adjust only counts which have OAR > 1", action='store_true')
    count_parser.add_argument("-m", "--method", help = "Method of sequencing library preparation", choices=['vjmplex', 'vmplex'], default='vjmplex')
    count_parser.add_argument("--voar", help = "Library of OAR stats for V region in JSON format", type=str, default=[], metavar='<str>', nargs='+')
    count_parser.add_argument("--joar", help = "Library of OAR stats for J region in JSON format\nIf multiple V and J libs are used the number of --vlib files\nmust be equal to --jlib files!", type=str, default=[], metavar='<str>', nargs='+')
    count_parser.add_argument("-r" ,"--report", help = "Create report", action='store_true')
    count_parser.add_argument("-wj" ,"--writejson", help = "Write OAR statistics in json format (only OAR)", action='store_true')
    count_parser.add_argument("-iter", help = """Maximal number of iteration of recalculation basing to the repertoire statistics. 
Runs infinitely if no OAR_stats.json library is provided.
Otherwise, only pre-loaded libraries are used for adjustment (iter=0)""", type=int, default=np.inf, metavar='<int>')
    count_parser.add_argument("-err", help = "Maximal absolute deviation\n(if owntable = True; default=0.1)", type=float, default=0.1, metavar='<float>')
    count_parser.add_argument("-mt", "--momentum", help = "OAR momentum on each step. Possible values: [0.01;1] (default=1.0)", type=float, default=1.0, metavar='<float>')
    count_parser.add_argument("--filter", help = "Prefilter clonotypes by indels in CDR3 nucleotide sequences\n(similar to stand-alone Filter command, default=False)", action='store_true')
    count_parser.add_argument("-se", "--seq_error", help = "Probable error of sequencing (default=0.01)", default=0.01, type=float, metavar='<float>')
    count_parser.add_argument("-id", "--indel", help = "Maximal amount of indels to concidering CDR3s to be identical (default=1)", default=1, type=int, metavar='<int>')    
    count_parser.add_argument("-ft", "--filter_type",  help = "Which frame groups are compared during the filtering (default=all)", choices=['IinO', 'OinI', 'all'], default="all", metavar='<list>', nargs='+')    
    count_parser.add_argument("-if", "--iterative_filter",  help = "Apply itterative collision merge (default for --filter_type=all)", action='store_true')   
    count_parser.add_argument("-v", "--verbosity", help = "Print messages to stdout, not only warnings and errors\n(default=False)", action='store_true')
    count_parser.set_defaults(func=Count.main)
    
    
    merge_parser = subparsers.add_parser("Merge", help = 'Merge multiple OAR statistics files to one JSON library.',  epilog="At least one type of input data list (separate files -f or directory -p) must be given!", formatter_class=argparse.RawTextHelpFormatter)    
    merge_parser.add_argument("-f", "--files", help = "List of full paths of input files separated with space", type=str, metavar='<input>', nargs='+', default=None)
    merge_parser.add_argument("-p", "--path",  help = "Full path of directory containing file for merging", type=str, metavar='<input>', default=None)
    merge_parser.add_argument("-min_outframe", help = "Minimal out-of-frame clones threshold for mean OAR calculation.\nIf a segment in this JSON file is present within less clones\nthan the specified value OAR is equal to 1", default=0, type=int, metavar='<int>')
    merge_parser.add_argument("-o", "--output",  help = "Prefix of merged library", type=str, metavar='<output>', required=True)
    merge_parser.set_defaults(func=Merge.main)


    filter_parser = subparsers.add_parser("Filter", help='Filter clonotypes by indel and sequencing error thresholds.', formatter_class=argparse.RawTextHelpFormatter)
    filter_parser.add_argument("-i", "--input", help = "Path of input VDJtools table", type=str, metavar='<input>', required=True)
    filter_parser.add_argument("-o", "--output",  help = "Path of output VDJtools table", type=str, metavar='<output>', required=True)
    filter_parser.add_argument("-se", "--seq_error", help = "Probable error of sequencing", default=0.01, type=float, metavar='<float>')
    filter_parser.add_argument("-id", "--indel",  help = "Maximal amount of indels to concidering CDR3s to be identical", default=1, type=int, metavar='<int>')
    filter_parser.add_argument("-om" ,"--outframe_mask", help = "Groups of rearrangements being considered to be out-of-frame. Possible values:\n - U (Uncomplete rearrangements),\n - O (outframe with * and/or _ in CDR3aa),\n - L (without \'C\' at the begining and \'W/F\' at the end Letter of CDR3aa),\n - G (pseudo- and ORF Genes)", default="O",type=str, metavar="<UOLG>")                
    filter_parser.add_argument("-ft", "--filter_type",  help = "Which frame groups are compared during the filtering (default=all)", choices=['IinO', 'OinI', 'all'], default="all", metavar='<list>', nargs='+')
    filter_parser.add_argument("-if", "--iterative_filter",  help = "Apply itterative collision merge (default for --filter_type=all)", action='store_true')   
    filter_parser.set_defaults(func=Filter.main)
    

    bias_parser = subparsers.add_parser("Bias", help='Introduce an artificial OAR bias in VDJtools repertoire table.', formatter_class=argparse.RawTextHelpFormatter)    
    bias_parser.add_argument("-i", "--input", help = "Path of input VDJtools table", type=str, metavar='<input>', required=True)
    bias_parser.add_argument("-o", "--output",  help = "Path of biased VDJtools table ", type=str, metavar='<output>', required=True)
    bias_parser.add_argument("--seed",  help = "Randomization seed (default=0)", type=int, metavar='<int>', default=0)
    bias_parser.add_argument("-m", "--method", help = "Method of sequencing library preparation (default=vjmplex)", choices=['vjmplex', 'vmplex'], default='vjmplex')
    bias_parser.add_argument("--noise", help = "Add random noise in bias for each clone", action='store_true')
    bias_parser.set_defaults(func=Bias.main)

    subargs,extra_args = parser.parse_known_args()
    
    if len(sys.argv)==1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    
    subargs.func(args = subargs)

        
if __name__=="__main__":
    main()